"Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码：
"Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码：
"Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码："Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                              还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码："Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                                                                                            还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码："Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                                                                                                                                                          还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码："Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                                                                                                                                                                                                                        还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码："Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                                                                                                                                                                                                                                                                                      还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码：
                                                                                                                                                                                                                                                                                                                      "Stream" 具有异步的特性。我么可以将一个文件或一段内容分为未知个制定大小的 "chunk" 去读取，每读取到一个 "chunk" 我们就将他输出。直到文件读完。这就像 "http1.1" 种支持的 "Transfer-Encoding: chunked" 那样。 ("chunk"可以以任何的形式存在，NodeJS默认是以 "Buffer" 的形式存在，这样更高效)。NodeJS中的"Stream"具备Unix系统上的一个超级特性就是 ("pipe" ------ 管道)。
                                                                                                                                                                                                                                                                                                                      还记得 “Http模块那篇” 第一个NodeJS程序， "Hello,大熊！" 吗？我们基于那个小程序做一下修改，如下代码：






